#include<stdio.h>
#include<mpi.h>
int main(int argc,char **argv)
{
int rank,size;
MPI_Status status;
long int data=500;
MPI_Init(NULL,NULL);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size != 2) {
        if (rank == 0)
            printf("This program requires exactly 2 processes.\n");
        MPI_Finalize();
        return 0;
    }
if (rank == 0) {
        // Process 0 sends first, then receives
        MPI_Recv(&data, 1, MPI_INT, 1, 10, MPI_COMM_WORLD, &status);
        printf("Process 0 received data back from Process 1\n");
        MPI_Send(&data, 1, MPI_INT, 1, 10, MPI_COMM_WORLD);
        printf("Process 0 sent data to Process 1\n");

        
    } else if (rank == 1) {
       
        MPI_Recv(&data, 1, MPI_INT, 0, 10, MPI_COMM_WORLD, &status);
        printf("Process 1 received data from Process 0\n");

        MPI_Send(&data, 1, MPI_INT, 0, 10, MPI_COMM_WORLD);
        printf("Process 1 sent data to Process 0\n");
    }

    MPI_Finalize();  
    return 0;
}
#include<stdio.h>
#include<mpi.h>
int main(int argc,char **argv)
{
int rank,size;
MPI_Status status;
long int data=500;
MPI_Init(NULL,NULL);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size != 2) {
        if (rank == 0)
            printf("This program requires exactly 2 processes.\n");
        MPI_Finalize();
        return 0;
    }
if (rank == 0) {
        // Process 0 sends first, then receives
        MPI_Send(&data, 1, MPI_INT, 1, 10, MPI_COMM_WORLD);
        printf("Process 0 sent data to Process 1\n");
        MPI_Recv(&data, 1, MPI_INT, 1, 10, MPI_COMM_WORLD, &status);
        printf("Process 0 received data back from Process 1\n");
        

        
    } else if (rank == 1) {
       
        MPI_Recv(&data, 1, MPI_INT, 0, 10, MPI_COMM_WORLD, &status);
        printf("Process 1 received data from Process 0\n");

        MPI_Send(&data, 1, MPI_INT, 0, 10, MPI_COMM_WORLD);
        printf("Process 1 sent data to Process 0\n");
    }
    printf("process %d finished communication\n",rank);

    MPI_Finalize();  
    return 0;
}#include<stdio.h>
#include<mpi.h>
int main(int argc,char **argv)
{
int rank,size;
MPI_Status status;
long int data=500;
MPI_Init(NULL,NULL);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size != 2) {
        if (rank == 0)
            printf("This program requires exactly 2 processes.\n");
        MPI_Finalize();
        return 0;
    }
if (rank == 0) {
        // Process 0 sends first, then receives
        MPI_Recv(&data, 1, MPI_INT, 1, 10, MPI_COMM_WORLD, &status);
        printf("Process 0 received data back from Process 1\n");
        MPI_Send(&data, 1, MPI_INT, 1, 10, MPI_COMM_WORLD);
        printf("Process 0 sent data to Process 1\n");

        
    } else if (rank == 1) {
       
        MPI_Recv(&data, 1, MPI_INT, 0, 10, MPI_COMM_WORLD, &status);
        printf("Process 1 received data from Process 0\n");

        MPI_Send(&data, 1, MPI_INT, 0, 10, MPI_COMM_WORLD);
        printf("Process 1 sent data to Process 0\n");
    }

    MPI_Finalize();  
    return 0;
}
