#include <stdlib.h>
#include <omp.h>
#include <time.h>
#include <stdio.h>

#define MAX 10

void merge(int arr[], int l, int m, int r) {
    int i = l;
    int j = m + 1;
    int k = l;
    int *temp = (int *)malloc(sizeof(int) * (r + 1));

    while (i <= m && j <= r) {
        if (arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }

    while (i <= m)
        temp[k++] = arr[i++];
    while (j <= r)
        temp[k++] = arr[j++];

    for (i = l; i <= r; i++)
        arr[i] = temp[i];

    free(temp);
}

void sequentialMergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;
        sequentialMergeSort(arr, l, m);
        sequentialMergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void parallelMergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;

        #pragma omp parallel sections
        {
            #pragma omp section
            parallelMergeSort(arr, l, m);

            #pragma omp section
            parallelMergeSort(arr, m + 1, r);
        }

        merge(arr, l, m, r);
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);

    int *arr = (int *)malloc(n * sizeof(int));
    int *arr_copy = (int *)malloc(n * sizeof(int));

    srand(time(NULL));
    printf("The original array is:\n");
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % MAX;
        printf("%d ", arr[i]);
    }
    printf("\n");

  
    for (int i = 0; i < n; i++)
        arr_copy[i] = arr[i];

    double start, end;
    start = omp_get_wtime();
    sequentialMergeSort(arr, 0, n - 1);
    end = omp_get_wtime();
    printf("\nSorted Array using Sequential Merge Sort:\n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\nSequential MergeSort Time: %f seconds\n", end - start);

    
    start = omp_get_wtime();
    parallelMergeSort(arr_copy, 0, n - 1);
    end = omp_get_wtime();
    printf("\nSorted Array using Parallel Merge Sort:\n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr_copy[i]);
    printf("\nParallel MergeSort Time: %f seconds\n", end - start);

  
    free(arr);
    free(arr_copy);

    return 0;
}
